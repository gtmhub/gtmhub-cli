name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: Version to release
        required: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      name: Checkout
    - name: Set up Go
      uses: actions/setup-go@v2
      with:
        go-version: 1.15
    - name: Build
      run: make build VERSION=${{ github.event.inputs.version }}
    - name: upload binary artifacts
      uses: actions/upload-artifact@v2
      with:
        name: binaries
        path: release/
  release:
    needs: [build]
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Download-Binaries
        uses: actions/download-artifact@v2
        with:
          name: binaries
          path: release/

      - name: Import Code-Signing Certificates
        uses: Apple-Actions/import-codesign-certs@v1
        with:
          # The certificates in a PKCS12 file encoded as a base64 string
          p12-file-base64: ${{ secrets.APPLE_DEVELOPER_CERTIFICATE_P12_BASE64 }}
          # The password used to import the PKCS12 file.
          p12-password: ${{ secrets.APPLE_DEVELOPER_CERTIFICATE_PASSWORD }}

      - name: Install gon via HomeBrew for code signing and app notarization
        run: |
          brew tap mitchellh/gon
          brew install mitchellh/gon/gon
      - name: Sign the mac binaries with Gon
        env:
          AC_USERNAME: ${{ secrets.AC_USERNAME }}
          AC_PASSWORD: ${{ secrets.AC_PASSWORD }}
        run: make sign
      - name: Zip up windows directory
        run: |
          zip -r gtmhub_windows.zip release/windows
      - name: Zip up linux directory
        run: |
          zip -r gtmhub_linux.zip release/linux
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.event.inputs.version }}
          release_name: v${{ github.event.inputs.version }}
          draft: false
          prerelease: false

      - name: Upload windows binaries Zip
        id: upload-release-asset-windows
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: gtmhub_windows.zip
          asset_name: gtmhub_windows.zip
          asset_content_type: application/zip
      - name: Upload linux binaries Zip
        id: upload-release-asset-linux
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: gtmhub_linux.zip
          asset_name: gtmhub_linux.zip
          asset_content_type: application/zip
      - name: Upload macos binaries Zip
        id: upload-release-asset-macos
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: release/darwin/gtmhub_macos.zip
          asset_name: gtmhub_macos.zip
          asset_content_type: application/zip
  update-homebrew:
    runs-on: "ubuntu-latest"
    needs: [release]
    steps:
      - name: Update homebrew formula
        uses: docker://scorpias/update-homebrew-formula-action:latest
        with:
          packageName: "gtmhub-cli"
          accessToken: ${{ secrets.HOMEBREW_UPDATE_TOKEN }}
          userName: ${{ secrets.HOMEBREW_UPDATE_USERNAME }}
          tapRepo: "gtmhub/homebrew-gtmhub"
          srcRepo: "gtmhub/gtmhub-cli"
  generate-release-notes:
    runs-on: ubuntu-latest
    needs: [release]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: '12'
          check-latest: true
      - run: npm install github-release-notes -g
      - run: gren release --token=${{ secrets.GITHUB_TOKEN }} --override

